/***********Section 13-1 Creating Tables *********/
/* Database Objects
Schema is a collection of logical structures of
data or schema objects.
Tables - Objects that store information in
the form of tables.
View - a virtual table created by
joining one or more tables.
Sequence - Generates a sequence of
numbers that is useful to create unique numbers.
Index - is a performance tuning method that
allows faster retreival of records.
Synonym - Gives Altenative names to objects.
*/

select * from user_tables;
select * from user_views;
select * from user_sequences;
select * from user_indexes;

/*********** Creating Tables*************/
/* Rules for table names and column names
Naming Rules:
Must begin with a letter
Must be 1-30 characters long
Must contain only A-Z, a-z,0-9,_,$ and #
Must not duplicate the name of another object Owned by the same
user
Must not be an Oracle server reserved word.
Naming Conventions
- Use descriptive names for tables and
database objects
- Table names are not case sensitive
- To access table that is not in your schema,
use the table owner's name
as a prefix to the table name:
Select * from student2.customers
*/

/* Invalid table names Examples */
create table 1test(student_no number(4));
create table quiz(no varchar(20));
create table view(emp_no number(4));
desc employees;

/* Create dept table syntax:CREATE TABLE [schema.]tablename (column datatype[size] [DEFAULT expr][,....]);
*/

/*
When you define a table, you can specify that a column be given a default value by using the DEFAULT option.
This option prevents null values from entering the column
*/
drop table dept1
Create table Dept1
(deptno NUMBER(2),
dname VARCHAR2(14),
loc VARCHAR2(13),
create_date DATE DEFAULT SYSDATE);
desc dept1;
select * from dept1;

/* DATA TYPES
Number - stores numeric data NUMBER(5)
NUMBER(p,s) - Numeric data with a decimal
NUMBER(7,2) - Stores 5 digits and 2 decimal places
CHAR - Fixed length Character data
(maximum 2000 characters)
VARCHAR2(size) - Variable length Character Data
(maximum 4000 characters)
DATE - Date Data type in DD-MON-YYYY format
*/

/* Number Datatype store zero, positive and negative numbers
column_name NUMBER
You can also specify precision
(total number of digits) and
the scale
(number of digits to the right of the decimal point)
column_name NUMBER(p,s)
*/
drop table test_data;
Create table test_data(employee_id number(5),
salary number(5,2));
/* Invalid data */
Insert into test_data(abc,2344.67);
/*valid data */
Insert into test_data values(5001, 678.32);
/*Invalid data */
Insert into test_data values(238383, 890.34);
/*valid data */
Insert into test_data values(-1234, 890.348);
select * from test_data;
/*CHAR and VARCHAR Data type -
stores alpha numeric characters
CHAR column_name(10) - fixed length. Unused spaces
are right padded with spaces to the specified length.
char name = 'King' --- stored as 'King '
VARCHAR column_name(10) - variable length strings.
*/
drop table test_data1;
Create table test_data1
(v_name varchar2(5), c_name char(5));

/*Invalid data */
Insert into test_data1 values('Tom', 'Tom Foster');

/*Valid data */
Insert into test_data1 values('Tom', 'King');
Select * from test_data1;
Select length(v_name), length(c_name)
from test_data1;
Select concat(v_name, 'Hello'), concat(c_name, 'Hello')
from test_data1;

/* LONG and CLOB are phasing out. No longer being used BLOB stores variable length binary large object string that can be upto 128 terabytes. CLOB stores variable length character large objects upto 4GB BFILE and BLOB are binary data types that deal with access
to images, videos etc. BLOB data type stores the content inside the Oracle database
BFILE stores only a reference to the file location directory and the file name.
*/

/* DATETIME data type
DATE datatype stores the year, month and day
TIMESTAMP - extension of the DATE data type.
Stores year, month, day, hour, min and
seconds values
Format of the TIMESTAMP - YYYY-MM-DD HH:MI:SS [.FFFFFFF].
TIMESTAMP WITH TIME ZONE -
includes time zone region name or time zone
offset in its value.
The time zone offset is the difference
(in hours and minutes) between local time
and UTC or Greenwich Mean time.
*/

drop table test_data3;
Create table test_data3
(start_date1 DATE,
start_date2 TIMESTAMP,
start_date3 TIMESTAMP WITH TIME ZONE,
start_date4 TIMESTAMP WITH LOCAL TIME ZONE
);

Insert into test_data3 values
(SYSDATE, SYSDATE, SYSDATE, SYSDATE);
select * from test_data3;

/* Interval Data types
- Used to store the interval betweeen
periods of time or span of time
- Two Types: INTERVAL YEAR TO MONTH
and INTERVAL DAY TO SECOND
-INTERVAL YEAR TO MONTH - difference between
dates that contain year month values
Syntax: INTERVAL YEAR [(year_precision)] TO MONTH
-INTERVAL DAY TO SECOND -
stores the period of time in terms of
days, hours, minutes and seconds
Syntax: INTERVAL DAY[(day_precision)]
to SECOND[(fractional_seconds_precision)]
*/

/*
INTERVAL '123-2' YEAR(3) TO MONTH
refers to an interval of 123 years, 2 months.
INTERVAL '123' YEAR(3)
An interval of 123 years 0 months.
INTERVAL '300' MONTH(3)
An interval of 300 months.
INTERVAL '50' MONTH Maps to
INTERVAL '4-2' YEAR TO MONTH and indicates
50 months or 4 years 2 months.
*/

drop table time_example1;
Create table time_example1
(appt_duration INTERVAL YEAR(3) TO MONTH);
Insert into time_example1(appt_duration)
values (INTERVAL '12' MONTH(3)); -- 12 months 1 year
Insert into time_example1(appt_duration)
values (INTERVAL '123' YEAR(3)); -- 123 Years 0 months
Insert into time_example1(appt_duration)
values (INTERVAL '5-6' YEAR TO MONTH) -- 5 Years 6 months

/* To find the appointment day from the current date */
Select
TO_CHAR(sysdate + appt_duration, 'dd-mon-yyyy')
from time_example1;
Select * from time_example1
/*

INTERVAL '4 5:12:10.222' DAY TO SECOND(3)
4 days, 5 hours, 12 minutes, 10 seconds, and 222 thousandths of a second.
INTERVAL '4 5:12' DAY TO MINUTE
4 days, 5 hours and 12 minutes.
INTERVAL '400 5' DAY(3) TO HOUR
400 days 5 hours.
*/

Create table time_example2
(day_duration INTERVAL DAY(3) TO SECOND);
Insert into time_example2 (day_duration)
values (Interval '180' DAY(3));
select * from time_example2
select sysdate + day_duration
from time_example2;

/****DATA Dictionary tables ********/
/* Oracle database stores two kinds of tables:
System Tables (or Data Dictionary tables) and user defined tables
Data Dictionary contains metadata of the objects stored in your database
Some key points about Data Dictionary
- Describes the database and its objects
- Database cannot operate without Data Dictionary
- Read-only reference (Access its contents using queries)
- Data Dictionary gets updated when DDL and DCL commands are issued
- Used by all users who have been given access to the
SELECT_CATALOG_ROLE
*/

/* Data Dictionary tables are created when a Database is created.
Data Dictionary tables cannot be accessed directly,
but through Data Dictionary Views that have a prefix of USER_, ALL_, DBA_
*/

/* Names of Data Dictionary Views are listed in DICTIONARY or DICT */
DESCRIBE DICTIONARY
SELECT * from DICTIONARY
where table_name = 'USER_OBJECTS';
SELECT * from DICTIONARY
where table_name = 'user_objects';
Select * from DICTIONARY
Where table_name like 'USER%';

/* Data Dictionary Views that have the prefix
USER_ or ALL_ can be
accessed by all users
USER_ refers to objects that are owned by
current user
ALL_ refers to objects owned and accessible
by current user
DBA_ refers to all objects in the database and
this is available to specific users
such as Database administrators.
*/

/*Query USER_OBJECTS to see all the
objects that are owned by the current user*/
Select * from USER_OBJECTS;
select count(*) from user_objects;

/* Select names, types, dates of creation and
status of all objects that are owned by
current user */
Select object_name, object_type, created, status
from user_objects
order by object_type;
Select distinct object_type
from user_objects;

/*Query ALL_OBJECTS to see all objects to which you have access */
Select * from ALL_OBJECTS where owner = 'SYS';
select count(*) from ALL_OBJECTS;
Select * from ALL_OBJECTS where owner = 'STUDENT21';

/* USER_TABLES view finds the names of all your tables */
DESC user_tables;

/* Display table_name that is in the current user schema */
Select table_name
from user_tables;
Select owner, table_name from ALL_TABLES;

/* Do not have privilages to access DBA_ tables */
Select table_name from DBA_TABLES;

/**********Section 13-3 *****************/
/*
Alter table statement
- Add a new column
- Modify an existing column
- Drop a column
ALTER table table_name
ADD column_name data_type;
ALTER table table_name
MODIFY column_name column_type
ALTER table table_name
RENAME old_name to new_name
ALTER table table_name
DROP column column_name
*/

/* Drop a table
- All data and structure of the table is deleted
- Any pending transactions are committed
- All constraints are dropped
- All indexes are dropped
- You cannot roll back the DROP Table statement.
*/

drop table mod_emp;
create table mod_emp
(last_name VARCHAR2(20),
salary NUMBER(8,2));
ALTER TABLE mod_emp
MODIFY(last_name VARCHAR2(30));

/* Would be permitted with or without data as column width is increased */
desc mod_emp;
ALTER TABLE mod_emp
MODIFY(last_name VARCHAR2(10));

/*Would be permitted only if columns were empty or the largest name was 10 or less characters */
Insert into mod_emp values ('Tom Foster', 4567.66);
select * from mod_emp;
ALTER TABLE mod_emp
MODIFY(last_name VARCHAR2(12));
ALTER TABLE mod_emp
MODIFY (salary NUMBER (7, 1));
ALTER TABLE mod_emp
MODIFY (salary NUMBER(8,2) DEFAULT 50);

/**Dropping a Column ***/
Alter table tablename
Drop column Coulumn_name;
alter table mod_emp
drop column salary;
desc mod_emp;
select * from mod_emp;
delete from mod_emp;
drop table mod_emp;
desc mod_emp;
alter table tablename SET unused(colum name);
desc mod_emp;
Drop table tablename;
drop table mod_emp;
select * from mod_emp;
FLASHBACK Table mod_emp to before DROP;
RENAME mod_emp to new_mod_emp1;
desc new_mod_emp1;
Drop table tablename;

/* Creating a table using a subquery Column data type definitions and the NOT NULL constraints are passed */
Create table Student10
as
Select * from student1;
select * from student10;

/* To create a table with the same structure, but no data */
Create table Student11
as
Select * from student1
where 1=2;
select * from student11;

/***********TRUNCATE **********/
/* Syntax of TRUNCATE:
TRUNCATE TABLE table_name;
*/

Truncate table customer;
select * from test_data1
delete from test_data1
truncate table test_data
rollback

/* Differences between TRUNCATE and DELETE Commands */
/*
1.TRUNCATE is a DDL command whereas DELETE is a DML Command
2. TRUNCATE removes the records permanently. You cannot do a rollback.
With DELETE command you can do a ROLLBACK, if you have not already
done a COMMIT.
3. You cannot where clause or any conditions with TRUNCATE.
DELETE allows you to check for a condition.
4. TRUNCATE is much faster than DELETE.
When you perform a DELETE, all the rows are copied into a ROLLBACK table
space before
actually deleting the data. This allows you to ROLLBACK the information.
TRUNCATE removes the data directly without copying it anywhere and is
much faster.