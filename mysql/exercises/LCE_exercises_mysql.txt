# Darius Corbin
# 04/04/2023
# Leet Code: Easy
# MySQL
# LCE_questions


1. /* *************************** (182) Duplicate Emails  *************************** */
TABLE EXAMPLES 1: 
Table: Person
+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| id          | int     |
| email       | varchar |
+-------------+---------+
TABLE INFO: id is the primary key column for this table.
			Each row of this table contains an email. The emails will not contain uppercase letters.

INSTRUCTIONS:
- Write an SQL query to report all the duplicate emails. Note that it's guaranteed that the email field is not NULL.
- Return the result table in any order.

OUTPUT EXAMPLES: The query result format is in the following example
Input: 
Person table:
+----+---------+
| id | email   |
+----+---------+
| 1  | a@b.com |
| 2  | c@d.com |
| 3  | a@b.com |
+----+---------+
Output: 
+---------+
| Email   |
+---------+
| a@b.com |
+---------+
EXPLANATION: 
a@b.com is repeated two times.
________________________________________________________________________________________________
#1. ANSWER:
# Write your MySQL query statement below
SELECT email
FROM Person
GROUP BY email
HAVING COUNT(*) > 1;
_________________________________________________________________________________________________
2. /* ***************************(175) Combine Two Tables *************************** */
TABLE EXAMPLES 1: Table(Person)
+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| personId    | int     |
| lastName    | varchar |
| firstName   | varchar |
+-------------+---------+
TABLE INFO: personId is the primary key column for this table.
			This table contains information about the ID of some persons and their first and last names.

TABLE EXAMPLES 2: (Address)
+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| addressId   | int     |
| personId    | int     |
| city        | varchar |
| state       | varchar |
+-------------+---------+
TABLE INFO: addressId is the primary key column for this table.
			Each row of this table contains information about
			the city and state of one person with ID = PersonId.

INSTRUCTIONS:
- Write an SQL query to report the first name, last name, city, and state
  of each person in the Person table. If the address of a personId is not present
  in the Address table, report null instead.
- Return the result table in any order.

OUTPUT EXAMPLES: The query result format is in the following example
Input: 
Person table:
+----------+----------+-----------+
| personId | lastName | firstName |
+----------+----------+-----------+
| 1        | Wang     | Allen     |
| 2        | Alice    | Bob       |
+----------+----------+-----------+
Address table:
+-----------+----------+---------------+------------+
| addressId | personId | city          | state      |
+-----------+----------+---------------+------------+
| 1         | 2        | New York City | New York   |
| 2         | 3        | Leetcode      | California |
+-----------+----------+---------------+------------+
Output: 
+-----------+----------+---------------+----------+
| firstName | lastName | city          | state    |
+-----------+----------+---------------+----------+
| Allen     | Wang     | Null          | Null     |
| Bob       | Alice    | New York City | New York |
+-----------+----------+---------------+----------+
EXPLANATION: 
- There is no address in the address table for the personId = 1 so we return null in their city and state.
- addressId = 1 contains information about the address of personId = 2.
_________________________________________________________________________________________________
#2. ANSWER:
# Write your MySQL query statement below
SELECT p.firstName, p.lastName, a.city, a.state
FROM Person p
LEFT JOIN Address a ON p.personId = a.personId;
_________________________________________________________________________________________________

3. /* ***************************(176) Second Highest Salary *************************** */
TABLE EXAMPLES 1: Table(Employee)
+-------------+------+
| Column Name | Type |
+-------------+------+
| id          | int  |
| salary      | int  |
+-------------+------+
TABLE INFO: id is the primary key column for this table.
			Each row of this table contains information about the salary of an employee.

INSTRUCTIONS:
- Write an SQL query to report the second highest salary from the Employee table.
  If there is no second highest salary, the query should report null.

OUTPUT EXAMPLES: The query result format is in the following example
Example 1
Input: 
Employee table:
+----+--------+
| id | salary |
+----+--------+
| 1  | 100    |
| 2  | 200    |
| 3  | 300    |
+----+--------+
Output: 
+---------------------+
| SecondHighestSalary |
+---------------------+
| 200                 |
+---------------------+

Example 2
Input: 
Employee table:
+----+--------+
| id | salary |
+----+--------+
| 1  | 100    |
+----+--------+
Output: 
+---------------------+
| SecondHighestSalary |
+---------------------+
| null                |
+---------------------+
_________________________________________________________________________________________________
#3. ANSWER:
# Write your MySQL query statement below
SELECT MAX(salary) AS SecondHighestSalary
FROM Employee
WHERE salary < (SELECT MAX(salary) FROM Employee)
_________________________________________________________________________________________________

4. /* ***************************(184) Department Highest Salary *************************** */
TABLE EXAMPLES 1: Table(Employee)
+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| id           | int     |
| name         | varchar |
| salary       | int     |
| departmentId | int     |
+--------------+---------+
TABLE INFO: id is the primary key column for this table.
			departmentId is a foreign key of the ID from the Department table.
			Each row of this table indicates the ID, name, and salary of an employee. It also contains the ID of their department.
			
TABLE EXAMPLES 2: Table (Department)
+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| id          | int     |
| name        | varchar |
+-------------+---------+
TABLE INFO: id is the primary key column for this table.
			It is guaranteed that department name is not NULL.
			Each row of this table indicates the ID of a department and its name.

INSTRUCTIONS:
- Write an SQL query to find employees who have the highest salary in each of the departments.
- Return the result table in any order.


OUTPUT EXAMPLES: The query result format is in the following example
Example 1
Input: 
Employee table:
+----+-------+--------+--------------+
| id | name  | salary | departmentId |
+----+-------+--------+--------------+
| 1  | Joe   | 70000  | 1            |
| 2  | Jim   | 90000  | 1            |
| 3  | Henry | 80000  | 2            |
| 4  | Sam   | 60000  | 2            |
| 5  | Max   | 90000  | 1            |
+----+-------+--------+--------------+
Department table:
+----+-------+
| id | name  |
+----+-------+
| 1  | IT    |
| 2  | Sales |
+----+-------+
Output: 
+------------+----------+--------+
| Department | Employee | Salary |
+------------+----------+--------+
| IT         | Jim      | 90000  |
| Sales      | Henry    | 80000  |
| IT         | Max      | 90000  |
+------------+----------+--------+
EXPLANATION: 
- Max and Jim both have the highest salary in the IT department and Henry has the highest salary in the Sales department.
_________________________________________________________________________________________________
#4. ANSWER:
# Write your MySQL query statement below
SELECT d.name as Department, e.name as Employee, e.salary as Salary
FROM Employee e
INNER JOIN Department d ON e.departmentId = d.id
WHERE (e.departmentId, e.salary) IN 
(SELECT departmentId, MAX(salary) FROM Employee GROUP BY departmentId);
_________________________________________________________________________________________________

5. /* ***************************(185) Department Top Three Salaries  *************************** */
TABLE EXAMPLES 1: Table(Employee)
+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| id           | int     |
| name         | varchar |
| salary       | int     |
| departmentId | int     |
+--------------+---------+
TABLE INFO: id is the primary key column for this table.
			departmentId is a foreign key of the ID from the Department table.
			Each row of this table indicates the ID, name, and salary of an employee.
			It also contains the ID of their department.
			
TABLE EXAMPLES 2: Table(Department)	
+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| id          | int     |
| name        | varchar |
+-------------+---------+
TABLE INFO: id is the primary key column for this table.
			Each row of this table indicates the ID of a department and its name.
INSTRUCTIONS:
- A company's executives are interested in seeing who earns the most money in each of the company's departments.
- A high earner in a department is an employee who has a salary in the top three unique salaries for that department.
- Write an SQL query to find the employees who are high earners in each of the departments.
- Return the result table in any order.

OUTPUT EXAMPLES: The query result format is in the following example
Example 1
Input: 
Employee table:
+----+-------+--------+--------------+
| id | name  | salary | departmentId |
+----+-------+--------+--------------+
| 1  | Joe   | 85000  | 1            |
| 2  | Henry | 80000  | 2            |
| 3  | Sam   | 60000  | 2            |
| 4  | Max   | 90000  | 1            |
| 5  | Janet | 69000  | 1            |
| 6  | Randy | 85000  | 1            |
| 7  | Will  | 70000  | 1            |
+----+-------+--------+--------------+
Department table:
+----+-------+
| id | name  |
+----+-------+
| 1  | IT    |
| 2  | Sales |
+----+-------+
Output: 
+------------+----------+--------+
| Department | Employee | Salary |
+------------+----------+--------+
| IT         | Max      | 90000  |
| IT         | Joe      | 85000  |
| IT         | Randy    | 85000  |
| IT         | Will     | 70000  |
| Sales      | Henry    | 80000  |
| Sales      | Sam      | 60000  |
+------------+----------+--------+
EXPLANATION: 
In the IT department:
- Max earns the highest unique salary
- Both Randy and Joe earn the second-highest unique salary
- Will earns the third-highest unique salary

In the Sales department:
- Henry earns the highest salary
- Sam earns the second-highest salary
- There is no third-highest salary as there are only two employees
_________________________________________________________________________________________________
#5. ANSWER:
# Write your MySQL query statement below
SELECT d.name AS Department, e.name AS Employee, e.salary AS Salary
FROM Department d
INNER JOIN (
    SELECT departmentId, name, salary,
        DENSE_RANK() OVER (PARTITION BY departmentId ORDER BY salary DESC) AS salary_rank
    FROM Employee
) e ON d.id = e.departmentId
WHERE e.salary_rank <= 3;
_________________________________________________________________________________________________
















































